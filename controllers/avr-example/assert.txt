subprogram "Ones"

   loop repeats 16 times; end loop;
   -- This is the "while (x)" loop which repeats once for
   -- every non-zero bit in "x". Since "x" is a 16-bit value,
   -- the loop repeats at most 16 times.

end "Ones";


subprogram "Solve"

   -- In the call "Count (k, x)", the parameter u => k is not
   -- bounded automatically, which leaves a loop unbounded.
   -- Since "k" is the number of "1" bits in "*x", which is
   -- a 16-bit value, "k" is at most 16.
   -- We would like to assert here that:
   --     variable "Solve|k" <= 16;
   -- However, this assertion is rejected because Bound-T
   -- cannot, at present, translate the compiler-defined
   -- location of the variable "k" to a value that Bound-T
   -- understands. So we do this instead:

   call to "Count"
      variable address "p16" <= 16;
   end call;
   --
   -- This bounds the parameter "u" of the "Count" call,
   -- which bounds the loop in "Count". Unfortunately we
   -- must use a register name, since the compiler maps
   -- the parameter "Count|u" to its working location in
   -- "Count", not to the registers that are used to pass
   -- the parameter at the call.

end "Solve";


subprogram "main"

   loop repeats 1 times; end loop;
   -- This is the eternal loop. By asserting one repeat,
   -- only one execution of the loop is included in the WCET.

end "main";
